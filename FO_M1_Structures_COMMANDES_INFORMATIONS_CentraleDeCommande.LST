C51 COMPILER V9.52.0.0   FO_M1_STRUCTURES_COMMANDES_INFORMATIONS_C                         03/21/2018 12:09:10 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE FO_M1_STRUCTURES_COMMANDES_INFORMATIONS_C
OBJECT MODULE PLACED IN FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.C BROWSE DEBUG O
                    -BJECTEXTEND TABS(2)

line level    source

   1          
   2          typedef unsigned char BYTE;
   3          typedef char SIGNED_BYTE;
   4          
   5          ///*******************************************************************************************************
             -**********************************
   6          // Structure de données pour les commandes transmises par la centrale ce commande
   7          // Les commandes décodées par FO-M1 seront stockées dans une structure de ce type pour être utilisées par 
             -FO-M5 
   8          //********************************************************************************************************
             -*********************************
   9          
  10          enum Epreuve {Epreuve_non, epreuve1, epreuve2, epreuve3, epreuve4, epreuve5, epreuve6, epreuve7, epreuve8,
             - Fin_Epreuve, Stop_Urgence};
  11          enum Mouvement {Mouvement_non, Avancer, Reculer, Stopper, Rot_90D, Rot_90G, Rot_180D, Rot_180G, Rot_AngD, 
             -RotAngG, Depl_Coord}; 
  12          enum ACQ_Son {ACQ_non, ACQ_oui};
  13          enum DCT_Obst {DCT_non, oui_180, oui_360};
  14          enum Lumiere {Lumiere_non, Allumer, Eteindre};
  15          enum Servo {Servo_non, Servo_H, Servo_V};
  16          enum Energie{Energie_non,Mesure_I,Mesure_E};
  17          enum Position{Position_non, Init_Position, Demande_Position};
  18          enum Photo{Photo_non,Photo_1,Photo_Multiple,Photo_continue,Photo_stop}; 
  19          
  20          typedef struct COMMANDES       // Cette structure contient toutes les commandes envoyées par la centrale d
             -e commande
  21                                         // Les variables de type enum correspondent aux commandes
  22                                         // Les variables de type BYTE, UNSIGNED_BYTE ou int correspondent aux param
             -ètres
  23                          
  24          {           
  25             enum  Epreuve Etat_Epreuve;     //Contient le numéro d'épreuve en cours - Commandes "D" "E" "Q"
  26             
  27             enum  Mouvement Etat_Mouvement; //Contient le type de mouvement demandé - Commandes "A" "B" "S" "RD" "R
             -G" "RC" "RA" "G"
  28                                             // Paramètres des commandes précédentes:     
  29             BYTE  Vitesse;                  // Paramètre vitesse - Peut aussi être modifié par la commande "TV"
  30             BYTE  Coord_X;                  // Paramètre coordonnée X
  31             BYTE  Coord_Y;                  // Paramètre coordonnée Y
  32             int   Angle;                    // Paramètre angle
  33             
  34             enum  ACQ_Son Etat_ACQ_Son;     // Contient la commande d'acquisition de signaux sonores "ASS"
  35                                             // Paramètre de la commande précédente:     
  36             BYTE  ACQ_Duree;                // Paramètre durée de la séquence d'acquisition
  37             
  38             enum  DCT_Obst Etat_DCT_Obst;   // Contient la commande de détection d'obstacle "MOB D" "MOB"
  39                                             // Paramètre de la commandes précédente:     
  40             BYTE  DCT_Obst_Resolution;      // Paramètre résolution angulaire de la détection d'obstacle
  41             
  42             enum  Lumiere Etat_Lumiere;     // Contient la commande d'allumage du pointeur lumineux "L" "LS"
  43                                             // Paramètres de la commande précédente:     
  44             BYTE  Lumiere_Intensite;        // Paramètre intensité lumineuse                 
  45             BYTE  Lumiere_Duree;            // Paramètre durée d'allumage
  46             BYTE  Lumire_Extinction;        // Paramètre durée d'extinction
C51 COMPILER V9.52.0.0   FO_M1_STRUCTURES_COMMANDES_INFORMATIONS_C                         03/21/2018 12:09:10 PAGE 2   

  47             BYTE  Lumiere_Nbre;             // Paramètre nombre de cycles d'allumage/extinction
  48             
  49             enum  Servo Etat_Servo;        // Contient la commande de positionnement d'un servo "CS C" "CS H" "CS V
             -" 
  50                                            // Paramètre de la commande précédente:     
  51             SIGNED_BYTE  Servo_Angle;      // Paramètre angle de rotation
  52             enum  Energie Etat_Energie;    // Contient la commande d'envoi du courant instantané ou de l'energie co
             -nsommée - Commandes "MI" "ME"
  53             enum  Position Etat_Position;  // Contient les commandes de gestion de la position, initialisation ou d
             -emande d'envoi
  54                                            // de la position - Commandes: "IPO" "POS"    
  55             BYTE  Pos_Coord_X;             // Paramètre coordonnée X pour initialisation de la position
  56             BYTE  Pos_Coord_Y;             // Paramètre coordonnée Y pour initialisation de la position
  57             int   Pos_Angle;               // Paramètre angle pour initialisation de la position  
  58             enum  Photo Etat_Photo;        // Contient les commandes de la gestion de la prise de photo - Commandes 
             -"PPH" "SPH"
  59             BYTE  Photo_Duree;             // Paramètre durée entre 2 photos
  60             BYTE  Photo_Nbre;              // Paramètre nombre de photos  
  61               
  62          } OUT_M1;
  63          
  64          
  65          
  66          //********************************************************************************************************
             -*********************************
  67          // Structure de données pour les informations à emettre vers la centrale ce commande
  68          // Les données "Informations" produites par FO-M5  seront stockées dans une structure de ce type pour être
             - utilisées par FO-M1 qui devra
  69          // les encoder en messages ASCII 
  70          //********************************************************************************************************
             -*********************************
  71          
  72          enum Invite {Invite_non, Invite_oui};
  73          enum BUT_Mouvement {BUT_Atteint_non, BUT_Atteint_oui};
  74          enum BUT_Servo {BUT_Servo_non, BUT_Servo_H, BUT_Servo_V, BUT_Servo_C};
  75          enum RESULT_Courant{RESULT_Courant_non,RESULT_Courant_oui};
  76          enum RESULT_Energie{RESULT_Energie_non,RESULT_Energie_oui};
  77          enum RESULT_Position{RESULT_Position_non,RESULT_Position_oui};
  78          enum RESULT_DCT_Obst {DCT_Obst_non, DCT_Obst_180_oui, DCT_Obst_360_oui};
  79          enum Aux {Aux_non, Aux_oui};
  80          
  81          typedef struct INFORMATIONS       // Cette structure contient toutes les informations susceptibles d'être 
             -transmises à la centrale de commande
  82                                            // Les variables de type enum correspondent aux types des informations
  83                                            // Les variables de type BYTE, UNSIGNED_BYTE ou int correspondent aux pa
             -ramètres
  84                          
  85          {           
  86             enum  Invite Etat_Invite;      // Contient l'identificateur information d'invite "I"
  87                                            // Paramètre de l'information précédente:     
  88             char  *MSG_Invit;              //Pointeur sur une chaine de caractère d'invite     
  89             
  90             enum  BUT_Mouvement Etat_BUT_Mouvement; // Contient l'identificateur information Arrivée au point spéci
             -fié "B"
  91                                                     // Pas de paramètre associé pour l'information précédente:     
  92             enum  BUT_Servo Etat_BUT_Servo;         // Contient l'identificateur information Servomoteur positionné
             - "AS C" "AS H" "AS H"
  93                                                     // Pas de paramètre associé pour l'information précédente:     
  94             
  95             enum  RESULT_DCT_Obst Etat_DCT_Obst;    // Contient l'identificateur information Détection des obstacle
             -s "KOB"
  96                                                     // Paramètre de l'information précédente:    
C51 COMPILER V9.52.0.0   FO_M1_STRUCTURES_COMMANDES_INFORMATIONS_C                         03/21/2018 12:09:10 PAGE 3   

  97             int   *Tab_Val_Obst;                    //Pointeur sur un tableau de valeurs de distance
  98             BYTE  Nbre_Val_obst;                    //Nombre de points dans le tableau
  99             
 100             enum RESULT_Courant Etat_RESULT_Courant; // Contient un idendicateur d'information "courant mesuré"
 101             unsigned int Mesure_Courant;            // Valeur du courant mesuré en mA   
 102             
 103             enum RESULT_Energie Etat_RESULT_Energie; // Contient un idendicateur d'information "Energie Consommée"
 104             unsigned int Mesure_Energie;            // Valeur de l'énergie consommée depuis le début de l'épreuve
 105             
 106             enum RESULT_Position Etat_RESULT_Position; // Contient un idendicateur d'information "Position"
 107             BYTE  Pos_Coord_X;                      // Information Paramètre coordonnée X
 108             BYTE  Pos_Coord_Y;                      // Information Paramètre coordonnée Y
 109             int   Pos_Angle;                        // Information Paramètre angle
 110             
 111             enum   Aux Etat_Aux;                    // Contient l'identificateur information auxiliaires "IA"
 112                                                     // Paramètre de l'information précédente:     
 113             char  *MSG_Aux;                         //Pointeur sur une chaine de caractère d'informations auxiliaire
             -s  
 114          } IN_M1;
 115          // *******************************************************************************************


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
