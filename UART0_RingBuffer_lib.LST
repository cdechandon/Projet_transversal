C51 COMPILER V9.52.0.0   UART0_RINGBUFFER_LIB                                              03/21/2018 12:09:10 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UART0_RINGBUFFER_LIB
OBJECT MODULE PLACED IN UART0_RingBuffer_lib.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE UART0_RingBuffer_lib.C BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //---------------------------------------------------------------------------------------
   2          // ID_1.1    UART0_RingBuffer_lib.C -----------------------------------------------------
   3          //---------------------------------------------------------------------------------------
   4          // ID_1.2  Source originale des codes de buffer circulaire: 
   5          //         Microcontroller Programming III  MP7-46 - 
   6          //         Université d'Adelaide 
   7          //
   8          // ID_1.3 Adapté par F.JOLY - CPE Lyon
   9          // ID_1.4 DATE: 08 Mars 2016 
  10          // ID_1.5 Version 1.0 
  11          // 
  12          // ID_1.6 Objectifs ---------------------------------------------------------------------
  13          // Gestion d'une UART en émission-réception par interruption et buffer circulaire
  14          // 
  15          // ID_1.7 Dépendances matérielles "cible" ----------------------------------------------- 
  16          // Processeur cible: C8051F02x
  17          // Périphérique UART0
  18          
  19          // ID_1.8 Dépendances matérielles "extérieures" -----------------------------------------
  20          // 
  21          
  22          // ID_1.9 Dépendances de type communications/protocolaires ------------------------------
  23          // La configuration de la communication UART est du type asynchrone - 8bits - 1 stop bit
  24          // Pas de parité
  25          //
  26          // ID_1.10 Fonctionnement du code -------------------------------------------------------
  27          // Le code contient:
  28          // - les fonctions de configuration de l'UART0 et de son timer associé. 
  29          // - Une fonction de création du buffer circulaire (initialisation de structures)
  30          // - Les fonctions de remplissage du buffer de transmission et les fonctions de vidage 
  31          //   du buffer de réception.
  32          //  - La fonction d'interruption UART0 chargée d'émettre sur la liaison série le contenu 
  33          //    du buffer de transmission et de stocker dans le buffer de réception les données 
  34          //    reçues sur la liaison série.
  35          
  36          // ID_1.11 Choix technologiques divers --------------------------------------------------
  37          // Utilisation de L'UART0 et du Timer 1 comme source d'horloge de l'UART0.
  38          // Pour fonctionner ce code a besoin des macros Define SYSCLK et BAUDRATE
  39          
  40          // ID_1.12 Tests réalisés ---------------------------------------------------------------
  41          // Validation sur plateforme 8051F020TB avec processeur 8051F020
  42          // Vitesse de transmission: 115200 Baud
  43          // Fréquence quartz: 22,1184 MHz
  44          //
  45          // ID_1.13 Chaine de compilation --------------------------------------------------------
  46          // KEIL C51 6.03 / KEIL EVAL C51
  47          //
  48          // ID_1.14 Documentation de référence ---------------------------------------------------
  49          // Datasheet 8051F020/1/2/3  Preliminary Rev. 1.4 12/03 
  50          //
  51          //ID_1.15 Commentaires sur les variables globales et les constantes ---------------------
  52          // La taille des buffers de réception et de transmission est modifiable avec la 
  53          // macro MAX_BUFLEN  
  54          
  55          //*************************************************************************************************
C51 COMPILER V9.52.0.0   UART0_RINGBUFFER_LIB                                              03/21/2018 12:09:10 PAGE 2   

  56          #include <c8051f020.h>                    // SFR declarations
  57          #include <stdio.h>
  58          #include <intrins.h>
  59          #include <string.h>
  60          #ifndef CFG_Globale
  61             #define CFG_Globale
  62             #include <CFG_Globale.h>
  63          #endif
  64          
  65          
  66          //*************************************************************************************************
  67          // Paramètresd modifiables
  68          //*************************************************************************************************
  69          #define       MAX_BUFLEN 32 // Taille des buffers de données
  70          
  71          //*************************************************************************************************
  72          // DEFINITION DES MACROS DE GESTION DE BUFFER CIRCULAIRE
  73          //*************************************************************************************************
  74          
  75          // Structure de gestion de buffer circulaire
  76            //rb_start: pointeur sur l'adresse de début du buffer 
  77            // rb_end: pointeur sur l'adresse de fin du buffer  
  78            // rb_in: pointeur sur la donnée à lire
  79            // rb_out: pointeur sur la case à écrire
  80              
  81          #define RB_CREATE(rb, type) \
  82             struct { \
  83               type *rb_start; \     
  84               type *rb_end; \     
  85               type *rb_in; \
  86               type *rb_out; \    
  87              } rb
  88          
  89          //Initialisation de la structure de pointeurs 
  90          // rb: adresse de la structure
  91          // start: adresse du premier élément du buffer 
  92          // number: nombre d'éléments du buffer - 1  (le "-1" n'est à mon avis pas nécessaire)
  93          #define RB_INIT(rb, start, number) \
  94                   ( (rb)->rb_in = (rb)->rb_out= (rb)->rb_start= start, \
  95                     (rb)->rb_end = &(rb)->rb_start[number] )
  96          
  97          //Cette macro rend le buffer circulaire. Quand on atteint la fin, on retourne au début
  98          #define RB_SLOT(rb, slot) \
  99                   ( (slot)==(rb)->rb_end? (rb)->rb_start: (slot) )
 100          
 101          // Test: Buffer vide? 
 102          #define RB_EMPTY(rb) ( (rb)->rb_in==(rb)->rb_out )
 103          
 104          // Test: Buffer plein?
 105          #define RB_FULL(rb)  ( RB_SLOT(rb, (rb)->rb_in+1)==(rb)->rb_out )
 106          
 107          // Incrementation du pointeur dur la case à écrire
 108          #define RB_PUSHADVANCE(rb) ( (rb)->rb_in= RB_SLOT((rb), (rb)->rb_in+1) )
 109          
 110          // Incrémentation du pointeur sur la case à lire
 111          #define RB_POPADVANCE(rb)  ( (rb)->rb_out= RB_SLOT((rb), (rb)->rb_out+1) )
 112          
 113          // Pointeur pour stocker une valeur dans le buffer
 114          #define RB_PUSHSLOT(rb) ( (rb)->rb_in )
 115          
 116          // pointeur pour lire une valeur dans le buffer
 117          #define RB_POPSLOT(rb)  ( (rb)->rb_out )
C51 COMPILER V9.52.0.0   UART0_RINGBUFFER_LIB                                              03/21/2018 12:09:10 PAGE 3   

 118          
 119          
 120          //*************************************************************************************************
 121          
 122          
 123          /* Transmission and Reception Data Buffers */
 124          static char  xdata outbuf[MAX_BUFLEN];     /* memory for transmission ring buffer #1 (TXD) */
 125          static char  xdata inbuf [MAX_BUFLEN];     /* memory for reception ring buffer #2 (RXD) */
 126          static  bit   TXactive = 0;             /* transmission status flag (off) */
 127          
 128          /* define out (transmission)  and in (reception)  ring buffer control structures */
 129          static RB_CREATE(out,unsigned char xdata);            /* static struct { ... } out; */
 130          static RB_CREATE(in, unsigned char xdata);            /* static struct { ... } in; */
 131          
 132          //**************************************************************************************************
 133          //**************************************************************************************************
 134          void UART0_ISR(void) interrupt 0x4 {
 135   1       
 136   1      //  static unsigned int cp_tx = 0;
 137   1      //  static unsigned int cp_rx = 0;
 138   1        
 139   1        if (TI0==1) // On peut envoyer une nouvelle donnée sur la liaison série
 140   1        { 
 141   2          if(!RB_EMPTY(&out)) {
 142   3             SBUF0 = *RB_POPSLOT(&out);      /* start transmission of next byte */
 143   3             RB_POPADVANCE(&out);            /* remove the sent byte from buffer */
 144   3      //       cp_tx++;
 145   3          }
 146   2          else TXactive = 0;                 /* TX finished, interface inactive */
 147   2        TI0 = 0;
 148   2        }
 149   1        else // RI0 à 1 - Donc une donnée a été reçue
 150   1        {
 151   2          if(!RB_FULL(&in)) {                   // si le buffer est plein, la donnée reçue est perdue
 152   3            *RB_PUSHSLOT(&in) = SBUF0;        /* store new data in the buffer */
 153   3            RB_PUSHADVANCE(&in);               /* next write location */
 154   3      //      cp_rx++;
 155   3         }
 156   2         RI0 = 0;
 157   2        }
 158   1      }
 159          // **************************************************************************************************
 160          // init_Serial_Buffer: Initialisation des structuresde gestion des buffers transmission et reception
 161          // *************************************************************************************************
 162          //**************************************************************************************************
 163          void init_Serial_Buffer(void) {
 164   1      
 165   1          RB_INIT(&out, outbuf, MAX_BUFLEN-1);           /* set up TX ring buffer */
 166   1          RB_INIT(&in, inbuf,MAX_BUFLEN-1);             /* set up RX ring buffer */
 167   1      
 168   1      }
 169          // **************************************************************************************************
 170          // SerOutchar: envoi d'un caractère dans le buffer de transmission de la liaison série
 171          // *************************************************************************************************
 172          unsigned char serOutchar(char c) {
 173   1      
 174   1        if(!RB_FULL(&out))  // si le buffer n'est pas plein, on place l'octet dans le buffer
 175   1        {                 
 176   2          *RB_PUSHSLOT(&out) = c;               /* store data in the buffer */
 177   2          RB_PUSHADVANCE(&out);                 /* adjust write position */
 178   2      
 179   2          if(!TXactive) {
C51 COMPILER V9.52.0.0   UART0_RINGBUFFER_LIB                                              03/21/2018 12:09:10 PAGE 4   

 180   3          TXactive = 1;                      /* indicate ongoing transmission */
 181   3          TI0 = 1;//   Placer le bit TI à 1 pour provoquer le déclenchement de l'interruption
 182   3          }
 183   2        return 0;  // opération correctement réalisée 
 184   2        }
 185   1         else return 1; // opération échouée - Typiquement Buffer plein
 186   1      }
 187          // ************************************************************************************************
 188          //  serInchar:  lecture d'un caractère dans le buffer de réception de la liaison série
 189          //  Fonction adaptée pour la réception de codes ASCII - La réception de la valeur binaire 0
 190          //  n'est pas possible (conflit avec le code 0 retourné si il n'y a pas de caractère reçu)
 191          // ************************************************************************************************
 192          char serInchar(void) {
 193   1      char c;
 194   1      
 195   1        if (!RB_EMPTY(&in))
 196   1        {                 /* wait for data */
 197   2      
 198   2          c = *RB_POPSLOT(&in);                 /* get character off the buffer */
 199   2          RB_POPADVANCE(&in);                   /* adjust read position */
 200   2          return c;
 201   2        }
 202   1        else return 0;
 203   1      }
 204          // ************************************************************************************************
 205          //  serInchar_Bin:  lecture d'un caractère dans le buffer de réception de la liaison série
 206          //  Fonction adaptée pour la réception de codes Binaires - Cette fonction retourne un entier. 
 207          //  L'octet de poids faible correspond au caractère reçu, l'octet de poids fort, s'il est nul indique 
 208          //  qu'aucun caractère n'a été reçu.
 209          //  
 210          // ************************************************************************************************
 211          unsigned int serInchar_Bin(void) {
 212   1      char c;
 213   1      unsigned int return_code = 0;
 214   1         
 215   1        if (!RB_EMPTY(&in))
 216   1        {                
 217   2          // un caractère au moins est dans le buffer de réception
 218   2          c = *RB_POPSLOT(&in);                 /* get character off the buffer */
 219   2          RB_POPADVANCE(&in);                   /* adjust read position */
 220   2          return 0xFF00+c;
 221   2        }
 222   1        // pas de caractère dans le buffer de réception.
 223   1        else return return_code;
 224   1      }
 225          // *************************************************************************************************
 226          // serOutstring:  Envoi d'une chaine de caractère dans le buffer de transmission
 227          // ************************************************************************************************
 228          unsigned char serOutstring(char *buf) {
 229   1      unsigned char len,code_err=0;
 230   1      
 231   1        for(len = 0; len < strlen(buf); len++)
 232   1           code_err +=serOutchar(buf[len]);
 233   1        return code_err;
 234   1      }
 235          //*************************************************************************************************
 236          //  CONFIGURATION BAS NIVEAU de L'UART0
 237          //*************************************************************************************************
 238          
 239          //*****************************************************************************
 240          #define Preload_Timer0 (SYSCLK/BAUDRATE/16)
 241          #if Preload_Timer0 > 255 
C51 COMPILER V9.52.0.0   UART0_RINGBUFFER_LIB                                              03/21/2018 12:09:10 PAGE 5   

              #error "Valeur Preload Timer0 HORS SPECIFICATIONS"
              #endif 
 244          //*****************************************************************************  
 245          //cfg_Clock_UART
 246          //  Utilisation du Timer 1
 247          //*****************************************************************************  
 248          void cfg_Clock_UART(void)
 249          {
 250   1        CKCON |= 0x10;      // T1M: Timer 1 use the system clock.
 251   1        TMOD |= 0x20;       //  Timer1 CLK = system clock
 252   1        TMOD &= 0x2f;       // Timer1 configuré en timer 8 bit avec auto-reload 
 253   1        TF1 = 0;          // Flag Timer effacé
 254   1      
 255   1        TH1 = -(Preload_Timer0);
 256   1        ET1 = 0;           // Interruption Timer 1 dévalidée
 257   1        TR1 = 1;           // Timer1 démarré
 258   1      }
 259           
 260          //*****************************************************************************  
 261          //CFG_uart0_mode1
 262          //
 263          //*****************************************************************************  
 264          void cfg_UART0_mode1(void)
 265          {
 266   1          RCLK0 = 0;     // Source clock Timer 1
 267   1          TCLK0 = 0;
 268   1          PCON  |= 0x80; //SMOD0: UART0 Baud Rate Doubler Disabled.
 269   1          PCON &= 0xBF;  // SSTAT0=0
 270   1          SCON0 = 0x70;   // Mode 1 - Check Stop bit - Reception validée
 271   1          TI0 = 1;        // Transmission: octet transmis (prêt à recevoir un char
 272   1                          // pour transmettre     
 273   1          ES0 = 1;        // interruption UART0 autorisée 
 274   1      }
 275          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    754    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
